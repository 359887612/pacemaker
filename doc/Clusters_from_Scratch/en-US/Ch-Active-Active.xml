<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Clusters_from_Scratch.ent">
%BOOK_ENTITIES;
]>
<chapter lang="en-US">
  <title>Conversion to Active/Active</title>
  <para>
    The primary requirement for an Active/Active cluster is that the data required for your services are available, simultaneously, on both machines.
    Pacemaker makes no requirement on how this is achieved, you could use a SAN if you had one available, however since DRBD supports multiple Primaries, we can also use that.
  </para>
  <para>
    The only hitch is that we need to use a cluster-aware filesystem (and the one we used earlier with DRBD, ext4, is not one of those).
    Both OCFS2 and GFS2 are supported, however here we will use GFS2 which comes with &DISTRO; &DISTRO_VERSION; .
  </para>
  <section>
    <title>Reconfigure Pacemaker for Active/Active</title>
    <para>
      Almost everything is in place.
      Recent versions of DRBD are capable of operating in Primary/Primary mode and the filesystem we’re using is cluster aware.
      All we need to do now is reconfigure the cluster to take advantage of this.
    </para>
    <para>
      This will involve a number of changes, so we’ll again use interactive mode.
    </para>
    
    <screen>
crm 
cib new active
    </screen>
    <para>
      There’s no point making the services active on both locations if we can’t reach them, so lets first clone the IP address.
      Cloned IPaddr2 resources use an iptables rule to ensure that each request only processed by one of the two clone instances.
      The additional meta options tell the cluster how many instances of the clone we want (one “request bucket” for each node) and that if all other nodes fail, then the remaining node should hold all of them.
      Otherwise the requests would be simply discarded.
    </para>
    <screen>
configure clone WebIP ClusterIP  \
        meta globally-unique=”true” clone-max=”2” clone-node-max=”2”
    </screen>
    <para>
      Now we must tell the ClusterIP how to decide which requests are processed by which hosts.
      To do this we must specify the clusterip_hash parameter.
    </para>
    <para>
      Open the ClusterIP resource
    </para>
    <screen>configure edit  ClusterIP</screen>
    <para>
      And add the following to the params line
    </para>
    <screen>clusterip_hash="sourceip"</screen>
    <para>
      So that the complete definition looks like:
    </para>
    <screen>
primitive ClusterIP ocf:heartbeat:IPaddr2 \ 
        params ip="192.168.122.101" cidr_netmask="32" clusterip_hash="sourceip" \
        op monitor interval="30s"
    </screen>
    <para>
      Here is the full transcript
    </para>
    <screen>
[root@pcmk-1 ~]# crm 
crm(live)# cib new active
INFO: active shadow CIB created
crm(active)# configure clone WebIP ClusterIP  \
        meta globally-unique=”true” clone-max=”2” clone-node-max=”2”
crm(active)# configure show
node pcmk-1
node pcmk-2
primitive WebData ocf:linbit:drbd \
        params drbd_resource="wwwdata" \
        op monitor interval="60s"
primitive WebFS ocf:heartbeat:Filesystem \
        params device="/dev/drbd/by-res/wwwdata" directory="/var/www/html" fstype=”gfs2”
primitive WebSite ocf:heartbeat:apache \
        params configfile="/etc/httpd/conf/httpd.conf" \
        op monitor interval="1min"
primitive ClusterIP ocf:heartbeat:IPaddr2 \
        params ip=”192.168.122.101” cidr_netmask=”32” clusterip_hash=”sourceip” \
        op monitor interval="30s"
primitive dlm ocf:pacemaker:controld \
        op monitor interval="120s"
primitive gfs-control ocf:pacemaker:controld \
   params daemon=”gfs_controld.pcmk” args=”-g 0” \
        op monitor interval="120s"
ms WebDataClone WebData \
        meta master-max="1" master-node-max="1" clone-max="2" clone-node-max="1" notify="true"
<emphasis>clone WebIP ClusterIP \</emphasis>
<emphasis> meta globally-unique=”true” clone-max=”2” clone-node-max=”2”</emphasis>
clone dlm-clone dlm \
        meta interleave="true"
clone gfs-clone gfs-control \
        meta interleave="true"
colocation WebFS-with-gfs-control inf: WebFS gfs-clone
colocation WebSite-with-WebFS inf: WebSite WebFS
colocation fs_on_drbd inf: WebFS WebDataClone:Master
colocation gfs-with-dlm inf: gfs-clone dlm-clone
<emphasis>colocation website-with-ip inf: WebSite WebIP</emphasis>
order WebFS-after-WebData inf: WebDataClone:promote WebFS:start
order WebSite-after-WebFS inf: WebFS WebSite
<emphasis>order apache-after-ip inf: WebIP WebSite</emphasis>
order start-WebFS-after-gfs-control inf: gfs-clone WebFS
order start-gfs-after-dlm inf: dlm-clone gfs-clone
property $id="cib-bootstrap-options" \
        dc-version="1.0.5-462f1569a43740667daf7b0f6b521742e9eb8fa7" \
        cluster-infrastructure="openais" \
        expected-quorum-votes=”2” \
        stonith-enabled="false" \
        no-quorum-policy="ignore"
rsc_defaults $id="rsc-options" \
        resource-stickiness=”100”
    </screen>
    <para>
      Notice how any constraints that referenced ClusterIP have been updated to use WebIP instead.
      This is an additional benefit of using the crm shell.
    </para>
    <para>
      Next we need to convert the filesystem and Apache resources into clones.
      Again, the shell will automatically update any relevant constraints.
    </para>
    <screen>
configure clone WebFSClone WebFS 
configure clone WebSiteClone WebSite
    </screen>
    <para>
      The last step is to tell the cluster that it is now allowed to promote both instances to be Primary (aka. Master).
    </para>	
    <screen>
configure edit WebDataClone
    </screen>
    <para>
      Change master-max to 2
    </para>
	<!-- para>configure show</para>
  <para>crm(active)# configure clone WebFSClone WebFS</para>
  <para>crm(active)# configure clone WebSiteClone WebSite</para>
  <para>crm(active)# configure edit WebDataClone</para>
  <para>crm(active)# configure show</para -->
    <screen>
node pcmk-1
node pcmk-2
primitive WebData ocf:linbit:drbd \
        params drbd_resource="wwwdata" \
        op monitor interval="60s"
primitive WebFS ocf:heartbeat:Filesystem \
        params device="/dev/drbd/by-res/wwwdata" directory="/var/www/html" fstype=”gfs2”
primitive WebSite ocf:heartbeat:apache \
        params configfile="/etc/httpd/conf/httpd.conf" \
        op monitor interval="1min"
primitive ClusterIP ocf:heartbeat:IPaddr2 \
        params ip=”192.168.122.101” cidr_netmask=”32” clusterip_hash=”sourceip” \
        op monitor interval="30s"
primitive dlm ocf:pacemaker:controld \
        op monitor interval="120s"
primitive gfs-control ocf:pacemaker:controld \
   params daemon=”gfs_controld.pcmk” args=”-g 0” \
        op monitor interval="120s"
ms WebDataClone WebData \
        meta master-max="2" master-node-max="1" clone-max="2" clone-node-max="1" notify="true"
<emphasis>clone WebFSClone WebFS</emphasis>
clone WebIP ClusterIP  \
        meta globally-unique=”true” clone-max=”2” clone-node-max=”2”
<emphasis>clone WebSiteClone WebSite</emphasis>
clone dlm-clone dlm \
        meta interleave="true"
clone gfs-clone gfs-control \
        meta interleave="true"
<emphasis>colocation WebFS-with-gfs-control inf: WebFSClone gfs-clone</emphasis>
<emphasis>colocation WebSite-with-WebFS inf: WebSiteClone WebFSClone</emphasis>
<emphasis>colocation fs_on_drbd inf: WebFSClone WebDataClone:Master</emphasis>
colocation gfs-with-dlm inf: gfs-clone dlm-clone
<emphasis>colocation website-with-ip inf: WebSiteClone WebIP</emphasis>
<emphasis>order WebFS-after-WebData inf: WebDataClone:promote WebFSClone:start</emphasis>
<emphasis>order WebSite-after-WebFS inf: WebFSClone WebSiteClone</emphasis>
<emphasis>order apache-after-ip inf: WebIP WebSiteClone</emphasis>
order start-WebFS-after-gfs-control inf: gfs-clone WebFSClone
order start-gfs-after-dlm inf: dlm-clone gfs-clone
property $id="cib-bootstrap-options" \
        dc-version="1.0.5-462f1569a43740667daf7b0f6b521742e9eb8fa7" \
        cluster-infrastructure="openais" \
        expected-quorum-votes=”2” \
        stonith-enabled="false" \
        no-quorum-policy="ignore"
rsc_defaults $id="rsc-options" \
        resource-stickiness=”100”
    </screen>
    <para>
      Review the configuration before uploading it to the cluster, quitting the shell and watching the cluster’s response
    </para>
    <screen>
crm(active)# cib commit active
INFO: commited 'active' shadow CIB to the cluster
crm(active)# quit
bye
[root@pcmk-1 ~]# crm_mon
============
Last updated: Thu Sep  3 21:37:27 2009
Stack: openais
Current DC: pcmk-2 - partition with quorum
Version: 1.0.5-462f1569a43740667daf7b0f6b521742e9eb8fa7
2 Nodes configured, 2 expected votes
6 Resources configured.
============

Online: [ pcmk-1 pcmk-2 ]

Master/Slave Set: WebDataClone
        Masters: [ pcmk-1 pcmk-2 ]
Clone Set: dlm-clone
        Started: [ pcmk-2 pcmk-1 ]
Clone Set: gfs-clone
        Started: [ pcmk-2 pcmk-1 ]
<emphasis>Clone Set: WebIP</emphasis>
<emphasis> Started: [ pcmk-1 pcmk-2 ]</emphasis>
<emphasis>Clone Set: WebFSClone</emphasis>
<emphasis> Started: [ pcmk-1 pcmk-2 ]</emphasis>
<emphasis>Clone Set: WebSiteClone</emphasis>
<emphasis> Started: [ pcmk-1 pcmk-2 ]</emphasis>
    </screen>
  </section>
  <section>
    <title>Testing Recovery</title>
    <note>
      <para>
	TODO: Put one node into standby to demonstrate failover
      </para>
    </note>
  </section>
</chapter>

