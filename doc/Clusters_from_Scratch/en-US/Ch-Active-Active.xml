<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Clusters_from_Scratch.ent">
%BOOK_ENTITIES;
]>
<chapter>
  <title>Conversion to Active/Active</title>
  <section>
    <title>Requirements</title>
    <para>
      The primary requirement for an Active/Active cluster is that the data required for your services is available, simultaneously, on both machines.
      Pacemaker makes no requirement on how this is achieved, you could use a SAN if you had one available, however since DRBD supports multiple Primaries, we can also use that.
    </para>
    <para>
      The only hitch is that we need to use a cluster-aware filesystem. The one we used earlier with DRBD, ext4, is not one of those.
      Both OCFS2 and GFS2 are supported, however here we will use GFS2 which comes with &DISTRO; &DISTRO_VERSION; .
    </para>
  </section>
  <section>
    <title>Install a Cluster Filesystem - GFS2</title>
    <para>
      The first thing to do is install gfs2-utils and gfs-pcmk on each machine. Since December 2010, the gfs-pcmk package in Fedora was replaced with the gfs2-cluster package and that will be installed automatically in place of the gfs-pcmk. If that package shows up on the line "installed" at the end of the yum output, please refer to the Appendix on "Using CMAN"
    </para>
    <screen>
[root@pcmk-1 ~]# <userinput>yum install -y gfs2-utils gfs2-cluster gfs-pcmk</userinput>
Setting up Install Process
Resolving Dependencies
--&gt; Running transaction check
---&gt; Package gfs-pcmk.x86_64 0:3.0.5-2.fc12 set to be updated
--&gt; Processing Dependency: libSaCkpt.so.3(OPENAIS_CKPT_B.01.01)(64bit) for package: gfs-pcmk-3.0.5-2.fc12.x86_64
--&gt; Processing Dependency: dlm-pcmk for package: gfs-pcmk-3.0.5-2.fc12.x86_64
--&gt; Processing Dependency: libccs.so.3()(64bit) for package: gfs-pcmk-3.0.5-2.fc12.x86_64
--&gt; Processing Dependency: libdlmcontrol.so.3()(64bit) for package: gfs-pcmk-3.0.5-2.fc12.x86_64
--&gt; Processing Dependency: liblogthread.so.3()(64bit) for package: gfs-pcmk-3.0.5-2.fc12.x86_64
--&gt; Processing Dependency: libSaCkpt.so.3()(64bit) for package: gfs-pcmk-3.0.5-2.fc12.x86_64
---&gt; Package gfs2-utils.x86_64 0:3.0.5-2.fc12 set to be updated
--&gt; Running transaction check
---&gt; Package clusterlib.x86_64 0:3.0.5-2.fc12 set to be updated
---&gt; Package dlm-pcmk.x86_64 0:3.0.5-2.fc12 set to be updated
---&gt; Package openaislib.x86_64 0:1.1.0-1.fc12 set to be updated
--&gt; Finished Dependency Resolution

Dependencies Resolved

===========================================================================================
 Package                Arch               Version                   Repository        Size
===========================================================================================
Installing:
 gfs-pcmk               x86_64             3.0.5-2.fc12              custom           101 k
 gfs2-utils             x86_64             3.0.5-2.fc12              custom           208 k
Installing for dependencies:
 clusterlib             x86_64             3.0.5-2.fc12              custom            65 k
 dlm-pcmk               x86_64             3.0.5-2.fc12              custom            93 k
 openaislib             x86_64             1.1.0-1.fc12              fedora            76 k

Transaction Summary
===========================================================================================
Install       5 Package(s)
Upgrade       0 Package(s)

Total download size: 541 k
Downloading Packages:
(1/5): clusterlib-3.0.5-2.fc12.x86_64.rpm                                |  65 kB     00:00
(2/5): dlm-pcmk-3.0.5-2.fc12.x86_64.rpm                                  |  93 kB     00:00
(3/5): gfs-pcmk-3.0.5-2.fc12.x86_64.rpm                                  | 101 kB     00:00
(4/5): gfs2-utils-3.0.5-2.fc12.x86_64.rpm                                | 208 kB     00:00
(5/5): openaislib-1.1.0-1.fc12.x86_64.rpm                                |  76 kB     00:00
-------------------------------------------------------------------------------------------
Total                                                           992 kB/s | 541 kB     00:00
Running rpm_check_debug
Running Transaction Test
Finished Transaction Test
Transaction Test Succeeded
Running Transaction
  Installing     : clusterlib-3.0.5-2.fc12.x86_64                                       1/5 
  Installing     : openaislib-1.1.0-1.fc12.x86_64                                       2/5 
  Installing     : dlm-pcmk-3.0.5-2.fc12.x86_64                                         3/5 
  Installing     : gfs-pcmk-3.0.5-2.fc12.x86_64                                         4/5 
  Installing     : gfs2-utils-3.0.5-2.fc12.x86_64                                       5/5 

Installed:
  gfs-pcmk.x86_64 0:3.0.5-2.fc12                    gfs2-utils.x86_64 0:3.0.5-2.fc12

Dependency Installed:
  clusterlib.x86_64 0:3.0.5-2.fc12   dlm-pcmk.x86_64 0:3.0.5-2.fc12 
  openaislib.x86_64 0:1.1.0-1.fc12  

Complete!
[root@pcmk-1 x86_64]#
    </screen>
    <warning>
      <para>
	If this step fails, it is likely that your version/distribution does not ship the "Pacemaker" versions of dlm_controld and/or gfs_controld.
	Normally these files would be called <filename>dlm_controld.pcmk</filename> and <filename>gfs_controld.pcmk</filename> and live in the <filename>/usr/sbin</filename> directory.
      </para>			  
      <para>
	If you cannot locate an installation source for these files, you will need to install a package called <literal>cman</literal> and reconfigure Corosync to use it as outlined in <xref linkend="ap-cman"/>.
      </para>
      <para>
	When using CMAN, you can skip <xref linkend="gfs-integration"/> where <literal>dlm-clone</literal> and <literal>gfs-clone</literal> are created, and proceed directly to <xref linkend="gfs-create-filesystem"/> after ensuring that <literal>gfs2-utils</literal> and <literal>gfs2-cluster</literal> were installed.
      </para>
    </warning>
  </section>
	
	<section id="gfs-integration">
		<title>Setup Pacemaker-GFS2 Integration</title>
		<para>
			GFS2 needs two services to be running, the first is the user-space interface to the kernel’s distributed lock manager (DLM). The DLM is used to co-ordinate which node(s) can access a given file (and when) and integrates with Pacemaker to obtain node membership <footnote>
			<para>
				The list of nodes the cluster considers to be available
			</para>
			</footnote> information and fencing capabilities.
		</para>
		<para>
			The second service is GFS2’s own control daemon which also integrates with Pacemaker to obtain node membership data.
		</para>
		<section>
			<title>Add the DLM service</title>
			<para>
				The DLM control daemon needs to run on all active cluster nodes, so we will use the shells interactive mode to create a cloned resource.
			</para>
			
<screen>
[root@pcmk-1 ~]# <userinput>crm</userinput>
crm(live)# <userinput>cib new stack-glue</userinput>
INFO: stack-glue shadow CIB created
crm(stack-glue)# <userinput>configure primitive dlm ocf:pacemaker:controld op monitor interval=120s</userinput>
crm(stack-glue)# <userinput>configure clone dlm-clone dlm meta interleave=true</userinput>
crm(stack-glue)# <userinput>configure show xml</userinput>
crm(stack-glue)# <userinput>configure show</userinput>
node pcmk-1
node pcmk-2
primitive WebData ocf:linbit:drbd \
        params drbd_resource="wwwdata" \
        op monitor interval="60s"
primitive WebFS ocf:heartbeat:Filesystem \
        params device="/dev/drbd/by-res/wwwdata" directory="/var/www/html" fstype="ext4"
primitive WebSite ocf:heartbeat:apache \
        params configfile="/etc/httpd/conf/httpd.conf" \
        op monitor interval="1min"
primitive ClusterIP ocf:heartbeat:IPaddr2 \
        params ip="192.168.122.101" cidr_netmask="32" \
        op monitor interval="30s"
<emphasis>primitive dlm ocf:pacemaker:controld \</emphasis>
<emphasis> op monitor interval="120s"</emphasis>
ms WebDataClone WebData \
        meta master-max="1" master-node-max="1" clone-max="2" clone-node-max="1" notify="true"
<emphasis>clone dlm-clone dlm \</emphasis>
<emphasis> meta interleave="true"</emphasis>
location prefer-pcmk-1 WebSite 50: pcmk-1
colocation WebSite-with-WebFS inf: WebSite WebFS
colocation fs_on_drbd inf: WebFS WebDataClone:Master
colocation website-with-ip inf: WebSite ClusterIP
order WebFS-after-WebData inf: WebDataClone:promote WebFS:start
order WebSite-after-WebFS inf: WebFS WebSite
order apache-after-ip inf: ClusterIP WebSite
property $id="cib-bootstrap-options" \
        dc-version="1.1.5-bdd89e69ba545404d02445be1f3d72e6a203ba2f" \
        cluster-infrastructure="openais" \
        expected-quorum-votes=”2” \
        stonith-enabled="false" \
        no-quorum-policy="ignore"
rsc_defaults $id="rsc-options" \
        resource-stickiness=”100”
</screen>
			<note>
			  <para>
			    TODO: Explain the meaning of the interleave option
			  </para>
			</note>
			<para>
			  Review the configuration before uploading it to the cluster, quitting the shell and watching the cluster’s response
			</para>
			<screen>
crm(stack-glue)# <userinput>cib commit stack-glue</userinput>
INFO: commited 'stack-glue' shadow CIB to the cluster
crm(stack-glue)# <userinput>quit</userinput>
bye
[root@pcmk-1 ~]# <userinput>crm_mon</userinput>
============
Last updated: Thu Sep  3 20:49:54 2009
Stack: openais
Current DC: pcmk-2 - partition with quorum
Version: 1.1.5-bdd89e69ba545404d02445be1f3d72e6a203ba2f
2 Nodes configured, 2 expected votes
5 Resources configured.
============

Online: [ pcmk-1 pcmk-2 ]

WebSite (ocf::heartbeat:apache):        Started pcmk-2
Master/Slave Set: WebDataClone
        Masters: [ pcmk-1 ]
        Slaves: [ pcmk-2 ]
ClusterIP        (ocf::heartbeat:IPaddr):        Started pcmk-2
<emphasis>Clone Set: dlm-clone</emphasis>
<emphasis> Started: [ pcmk-2 pcmk-1 ]</emphasis>
WebFS   (ocf::heartbeat:Filesystem):    Started pcmk-2
			</screen>
		</section>
		
		<section>
			<title>Add the GFS2 service</title>
			<para>
				Once the DLM is active, we can add the GFS2 control daemon.
			</para>
			<para>
				Use the crm shell to create the gfs-control cluster resource:
			</para>
			
<screen>
[root@pcmk-1 ~]# <userinput>crm</userinput>
crm(live)# <userinput>cib new gfs-glue --force</userinput>
INFO: gfs-glue shadow CIB created
crm(gfs-glue)# <userinput>configure primitive gfs-control ocf:pacemaker:controld params daemon=gfs_controld.pcmk args="-g 0" op monitor interval=120s</userinput>
crm(gfs-glue)# <userinput>configure clone gfs-clone gfs-control meta interleave=true</userinput>
</screen>
			<para>
				Now ensure Pacemaker only starts the gfs-control service on nodes that also have a copy of the dlm service (created above) already running
			</para>
			
<screen>
crm(gfs-glue)# <userinput>configure colocation gfs-with-dlm INFINITY: gfs-clone dlm-clone</userinput>
crm(gfs-glue)# <userinput>configure order start-gfs-after-dlm mandatory: dlm-clone gfs-clone</userinput>
</screen>
			<para>
				Review the configuration before uploading it to the cluster, quitting the shell and watching the cluster’s response
			</para>
			
<screen>
crm(gfs-glue)# <userinput>configure show</userinput>
node pcmk-1
node pcmk-2
primitive WebData ocf:linbit:drbd \
        params drbd_resource="wwwdata" \
        op monitor interval="60s"
primitive WebFS ocf:heartbeat:Filesystem \
        params device="/dev/drbd/by-res/wwwdata" directory="/var/www/html" fstype="ext4"
primitive WebSite ocf:heartbeat:apache \
        params configfile="/etc/httpd/conf/httpd.conf" \
        op monitor interval="1min"
primitive ClusterIP ocf:heartbeat:IPaddr2 \
        params ip="192.168.122.101" cidr_netmask="32" \
        op monitor interval="30s"
primitive dlm ocf:pacemaker:controld \
        op monitor interval="120s"
<emphasis>primitive gfs-control ocf:pacemaker:controld \</emphasis>
<emphasis> params daemon=”gfs_controld.pcmk” args=”-g 0” \</emphasis>
<emphasis> op monitor interval="120s"</emphasis>
ms WebDataClone WebData \
        meta master-max="1" master-node-max="1" clone-max="2" clone-node-max="1" notify="true"
clone dlm-clone dlm \
        meta interleave="true"
<emphasis>clone gfs-clone gfs-control \</emphasis>
<emphasis> meta interleave="true"</emphasis>
location prefer-pcmk-1 WebSite 50: pcmk-1
colocation WebSite-with-WebFS inf: WebSite WebFS
colocation fs_on_drbd inf: WebFS WebDataClone:Master
<emphasis>colocation gfs-with-dlm inf: gfs-clone dlm-clone</emphasis>
colocation website-with-ip inf: WebSite ClusterIP
order WebFS-after-WebData inf: WebDataClone:promote WebFS:start
order WebSite-after-WebFS inf: WebFS WebSite
order apache-after-ip inf: ClusterIP WebSite
<emphasis>order start-gfs-after-dlm inf: dlm-clone gfs-clone</emphasis>
property $id="cib-bootstrap-options" \
        dc-version="1.1.5-bdd89e69ba545404d02445be1f3d72e6a203ba2f" \
        cluster-infrastructure="openais" \
        expected-quorum-votes=”2” \
        stonith-enabled="false" \
        no-quorum-policy="ignore"
rsc_defaults $id="rsc-options" \
        resource-stickiness=”100”
crm(gfs-glue)# <userinput>cib commit gfs-glue</userinput>
INFO: commited 'gfs-glue' shadow CIB to the cluster
crm(gfs-glue)# <userinput>quit</userinput>
bye
[root@pcmk-1 ~]# <userinput>crm_mon</userinput>
============
Last updated: Thu Sep  3 20:49:54 2009
Stack: openais
Current DC: pcmk-2 - partition with quorum
Version: 1.1.5-bdd89e69ba545404d02445be1f3d72e6a203ba2f
2 Nodes configured, 2 expected votes
6 Resources configured.
============

Online: [ pcmk-1 pcmk-2 ]

WebSite (ocf::heartbeat:apache):        Started pcmk-2
Master/Slave Set: WebDataClone
        Masters: [ pcmk-1 ]
        Slaves: [ pcmk-2 ]
ClusterIP        (ocf::heartbeat:IPaddr):        Started pcmk-2
Clone Set: dlm-clone
        Started: [ pcmk-2 pcmk-1 ]
<emphasis>Clone Set: gfs-clone</emphasis>
<emphasis> Started: [ pcmk-2 pcmk-1 ]</emphasis>
WebFS   (ocf::heartbeat:Filesystem):    Started pcmk-1
</screen>
		</section>

	</section>
	
	<section id="gfs-create-filesystem">
		<title>Create a GFS2 Filesystem</title>
		<section>
			<title>Preparation</title>
			<para>
				Before we do anything to the existing partition, we need to make sure it is unmounted. We do this by tell the cluster to stop the WebFS resource. This will ensure that other resources (in our case, Apache) using WebFS are not only stopped, but stopped in the correct order.
			</para>
			
<screen>
[root@pcmk-1 ~]# <userinput>crm_resource --resource WebFS --set-parameter target-role --meta --parameter-value Stopped</userinput>
[root@pcmk-1 ~]# <userinput>crm_mon</userinput>
============
Last updated: Thu Sep  3 15:18:06 2009
Stack: openais
Current DC: pcmk-1 - partition with quorum
Version: 1.1.5-bdd89e69ba545404d02445be1f3d72e6a203ba2f
2 Nodes configured, 2 expected votes
6 Resources configured.
============

Online: [ pcmk-1 pcmk-2 ]

Master/Slave Set: WebDataClone
        Masters: [ pcmk-1 ]
        Slaves: [ pcmk-2 ]
ClusterIP        (ocf::heartbeat:IPaddr):        Started pcmk-1
Clone Set: dlm-clone
        Started: [ pcmk-2 pcmk-1 ]
Clone Set: gfs-clone
        Started: [ pcmk-2 pcmk-1 ]
</screen>
			<note>
				<para>
					Note that both Apache and WebFS have been stopped.
				</para>
			</note>
		</section>
		
		<section>
			<title>Create and Populate an GFS2 Partition</title>
			<para>
				Now that the cluster stack and integration pieces are running smoothly, we can create an GFS2 partition.
			</para>
			<warning>
				<para>
					This will erase all previous content stored on the DRBD device. Ensure you have a copy of any important data.
				</para>
			</warning>
			<para>
				We need to specify a number of additional parameters when creating a GFS2 partition.
			</para>
			<para>
				First we must use the -p option to specify that we want to use the the Kernel’s DLM. Next we use -j to indicate that it should reserve enough space for two journals (one per node accessing the filesystem).
			</para>
			<para>
				Lastly, we use -t to specify the lock table name. The format for this field is clustername:fsname. For the fsname, we just need to pick something unique and descriptive and since we haven’t specified a clustername yet, we will use the default (pcmk).
			</para>
			<para>
				To specify an alternate name for the cluster, locate the service section containing “name: pacemaker” in corosync.conf and insert the following line anywhere inside the block:
			</para>
			<para>
				clustername: myname
			</para>
			<para>
				Do this on each node in the cluster and be sure to restart them before continuing.
			</para>
			
<screen>
[root@pcmk-1 ~]# <userinput>mkfs.gfs2 -p lock_dlm -j 2 -t pcmk:web /dev/drbd1</userinput>
This will destroy any data on /dev/drbd1.
It appears to contain: data

Are you sure you want to proceed? [y/n] y

Device:                    /dev/drbd1
Blocksize:                 4096
Device Size                1.00 GB (131072 blocks)
Filesystem Size:           1.00 GB (131070 blocks)
Journals:                  2
Resource Groups:           2
Locking Protocol:          "lock_dlm"
Lock Table:                "pcmk:web"
UUID:                      6B776F46-177B-BAF8-2C2B-292C0E078613

[root@pcmk-1 ~]#
</screen>
			<para>
				Then (re)populate the new filesystem with data (web pages). For now we’ll create another variation on our home page.
			</para>
			
<screen>
[root@pcmk-1 ~]# <userinput>mount /dev/drbd1 /mnt/</userinput>
[root@pcmk-1 ~]# <userinput>cat &lt;&lt;-END &gt;/mnt/index.html</userinput>
&lt;html&gt;
&lt;body&gt;My Test Site - GFS2&lt;/body&gt;
&lt;/html&gt;
END
[root@pcmk-1 ~]# <userinput>umount /dev/drbd1</userinput>
[root@pcmk-1 ~]# <userinput>drbdadm verify wwwdata</userinput>
[root@pcmk-1 ~]#
</screen>
		</section>

	</section>
	
	<section>
		<title>Reconfigure the Cluster for GFS2</title>
		
<screen>
[root@pcmk-1 ~]# <userinput>crm</userinput>
crm(live)# <userinput>cib new GFS2</userinput>
INFO: GFS2 shadow CIB created
crm(GFS2)# <userinput>configure delete WebFS</userinput>
crm(GFS2)# <userinput>configure primitive WebFS ocf:heartbeat:Filesystem params device="/dev/drbd/by-res/wwwdata" directory="/var/www/html" fstype=”gfs2”</userinput>
</screen>
		<para>
			Now that we’ve recreated the resource, we also need to recreate all the constraints that used it. This is because the shell will automatically remove any constraints that referenced WebFS.
		</para>
		
<screen>
crm(GFS2)# <userinput>configure colocation WebSite-with-WebFS inf: WebSite WebFS</userinput>
crm(GFS2)# <userinput>configure colocation fs_on_drbd inf: WebFS WebDataClone:Master</userinput>
crm(GFS2)# <userinput>configure order WebFS-after-WebData inf: WebDataClone:promote WebFS:start</userinput>
crm(GFS2)# <userinput>configure order WebSite-after-WebFS inf: WebFS WebSite</userinput>
crm(GFS2)# <userinput>configure colocation WebFS-with-gfs-control INFINITY: WebFS gfs-clone</userinput>
crm(GFS2)# <userinput>configure order start-WebFS-after-gfs-control mandatory: gfs-clone WebFS</userinput>
crm(GFS2)# <userinput>configure show</userinput>
node pcmk-1
node pcmk-2
primitive WebData ocf:linbit:drbd \
        params drbd_resource="wwwdata" \
        op monitor interval="60s"
<emphasis>primitive WebFS ocf:heartbeat:Filesystem \</emphasis>
<emphasis> params device="/dev/drbd/by-res/wwwdata" directory="/var/www/html" fstype=”gfs2”</emphasis>
primitive WebSite ocf:heartbeat:apache \
        params configfile="/etc/httpd/conf/httpd.conf" \
        op monitor interval="1min"
primitive ClusterIP ocf:heartbeat:IPaddr2 \
        params ip="192.168.122.101" cidr_netmask="32" \
        op monitor interval="30s"
primitive dlm ocf:pacemaker:controld \
        op monitor interval="120s"
primitive gfs-control ocf:pacemaker:controld \
   params daemon=”gfs_controld.pcmk” args=”-g 0” \
        op monitor interval="120s"
ms WebDataClone WebData \
        meta master-max="1" master-node-max="1" clone-max="2" clone-node-max="1" notify="true"
clone dlm-clone dlm \
        meta interleave="true"
clone gfs-clone gfs-control \
        meta interleave="true"
colocation WebFS-with-gfs-control inf: WebFS gfs-clone
colocation WebSite-with-WebFS inf: WebSite WebFS
colocation fs_on_drbd inf: WebFS WebDataClone:Master
colocation gfs-with-dlm inf: gfs-clone dlm-clone
colocation website-with-ip inf: WebSite ClusterIP
order WebFS-after-WebData inf: WebDataClone:promote WebFS:start
order WebSite-after-WebFS inf: WebFS WebSite
order apache-after-ip inf: ClusterIP WebSite
order start-WebFS-after-gfs-control inf: gfs-clone WebFS
order start-gfs-after-dlm inf: dlm-clone gfs-clone
property $id="cib-bootstrap-options" \
        dc-version="1.1.5-bdd89e69ba545404d02445be1f3d72e6a203ba2f" \
        cluster-infrastructure="openais" \
        expected-quorum-votes=”2” \
        stonith-enabled="false" \
        no-quorum-policy="ignore"
rsc_defaults $id="rsc-options" \
        resource-stickiness=”100”
</screen>
		<para>
			Review the configuration before uploading it to the cluster, quitting the shell and watching the cluster’s response
		</para>
		
<screen>
crm(GFS2)# <userinput>cib commit GFS2</userinput>
INFO: commited 'GFS2' shadow CIB to the cluster
crm(GFS2)# <userinput>quit</userinput>
bye
[root@pcmk-1 ~]# <userinput>crm_mon</userinput>
============
Last updated: Thu Sep  3 20:49:54 2009
Stack: openais
Current DC: pcmk-2 - partition with quorum
Version: 1.1.5-bdd89e69ba545404d02445be1f3d72e6a203ba2f
2 Nodes configured, 2 expected votes
6 Resources configured.
============

Online: [ pcmk-1 pcmk-2 ]

WebSite (ocf::heartbeat:apache):        Started pcmk-2
Master/Slave Set: WebDataClone
        Masters: [ pcmk-1 ]
        Slaves: [ pcmk-2 ]
ClusterIP        (ocf::heartbeat:IPaddr):        Started pcmk-2
Clone Set: dlm-clone
        Started: [ pcmk-2 pcmk-1 ]
Clone Set: gfs-clone
        Started: [ pcmk-2 pcmk-1 ]
<emphasis>WebFS (ocf::heartbeat:Filesystem): Started pcmk-1</emphasis>
</screen>
	</section>
  <section>
    <title>Reconfigure Pacemaker for Active/Active</title>
    <para>
      Almost everything is in place.
      Recent versions of DRBD are capable of operating in Primary/Primary mode and the filesystem we’re using is cluster aware.
      All we need to do now is reconfigure the cluster to take advantage of this.
    </para>
    <para>
      This will involve a number of changes, so we’ll again use interactive mode.
    </para>
    
    <screen>
[root@pcmk-1 ~]# <userinput>crm</userinput>
[root@pcmk-1 ~]# <userinput>cib new active</userinput>
    </screen>
    <para>
      There’s no point making the services active on both locations if we can’t reach them, so lets first clone the IP address.
      Cloned IPaddr2 resources use an iptables rule to ensure that each request only processed by one of the two clone instances.
      The additional meta options tell the cluster how many instances of the clone we want (one “request bucket” for each node) and that if all other nodes fail, then the remaining node should hold all of them.
      Otherwise the requests would be simply discarded.
    </para>
    <screen>
[root@pcmk-1 ~]# <userinput>configure clone WebIP ClusterIP  \</userinput>
<userinput>        meta globally-unique=”true” clone-max=”2” clone-node-max=”2”</userinput>
    </screen>
    <para>
      Now we must tell the ClusterIP how to decide which requests are processed by which hosts.
      To do this we must specify the clusterip_hash parameter.
    </para>
    <para>
      Open the ClusterIP resource
    </para>
    <screen>[root@pcmk-1 ~]# <userinput>configure edit  ClusterIP</userinput></screen>
    <para>
      And add the following to the params line
    </para>
    <screen>clusterip_hash="sourceip"</screen>
    <para>
      So that the complete definition looks like:
    </para>
    <screen>
primitive ClusterIP ocf:heartbeat:IPaddr2 \ 
        params ip="192.168.122.101" cidr_netmask="32" clusterip_hash="sourceip" \
        op monitor interval="30s"
    </screen>
    <para>
      Here is the full transcript
    </para>
    <screen>
[root@pcmk-1 ~]# <userinput>crm </userinput>
crm(live)# <userinput>cib new active</userinput>
INFO: active shadow CIB created
crm(active)# <userinput>configure clone WebIP ClusterIP  \</userinput>
        meta globally-unique=”true” clone-max=”2” clone-node-max=”2”
crm(active)# <userinput>configure show</userinput>
node pcmk-1
node pcmk-2
primitive WebData ocf:linbit:drbd \
        params drbd_resource="wwwdata" \
        op monitor interval="60s"
primitive WebFS ocf:heartbeat:Filesystem \
        params device="/dev/drbd/by-res/wwwdata" directory="/var/www/html" fstype=”gfs2”
primitive WebSite ocf:heartbeat:apache \
        params configfile="/etc/httpd/conf/httpd.conf" \
        op monitor interval="1min"
primitive ClusterIP ocf:heartbeat:IPaddr2 \
        params ip=”192.168.122.101” cidr_netmask=”32” clusterip_hash=”sourceip” \
        op monitor interval="30s"
primitive dlm ocf:pacemaker:controld \
        op monitor interval="120s"
primitive gfs-control ocf:pacemaker:controld \
   params daemon=”gfs_controld.pcmk” args=”-g 0” \
        op monitor interval="120s"
ms WebDataClone WebData \
        meta master-max="1" master-node-max="1" clone-max="2" clone-node-max="1" notify="true"
<emphasis>clone WebIP ClusterIP \</emphasis>
<emphasis> meta globally-unique=”true” clone-max=”2” clone-node-max=”2”</emphasis>
clone dlm-clone dlm \
        meta interleave="true"
clone gfs-clone gfs-control \
        meta interleave="true"
colocation WebFS-with-gfs-control inf: WebFS gfs-clone
colocation WebSite-with-WebFS inf: WebSite WebFS
colocation fs_on_drbd inf: WebFS WebDataClone:Master
colocation gfs-with-dlm inf: gfs-clone dlm-clone
<emphasis>colocation website-with-ip inf: WebSite WebIP</emphasis>
order WebFS-after-WebData inf: WebDataClone:promote WebFS:start
order WebSite-after-WebFS inf: WebFS WebSite
<emphasis>order apache-after-ip inf: WebIP WebSite</emphasis>
order start-WebFS-after-gfs-control inf: gfs-clone WebFS
order start-gfs-after-dlm inf: dlm-clone gfs-clone
property $id="cib-bootstrap-options" \
        dc-version="1.1.5-bdd89e69ba545404d02445be1f3d72e6a203ba2f" \
        cluster-infrastructure="openais" \
        expected-quorum-votes=”2” \
        stonith-enabled="false" \
        no-quorum-policy="ignore"
rsc_defaults $id="rsc-options" \
        resource-stickiness=”100”
    </screen>
    <para>
      Notice how any constraints that referenced ClusterIP have been updated to use WebIP instead.
      This is an additional benefit of using the crm shell.
    </para>
    <para>
      Next we need to convert the filesystem and Apache resources into clones.
      Again, the shell will automatically update any relevant constraints.
    </para>
    <screen>
crm(active)# <userinput>configure clone WebFSClone WebFS</userinput>
crm(active)# <userinput>configure clone WebSiteClone WebSite</userinput>
    </screen>
    <para>
      The last step is to tell the cluster that it is now allowed to promote both instances to be Primary (aka. Master).
    </para>	
    <screen>
crm(active)# <userinput>configure edit WebDataClone</userinput>
    </screen>
    <para>
      Change master-max to 2
    </para>
    <screen>
crm(active)# <userinput>configure show</userinput>
node pcmk-1
node pcmk-2
primitive WebData ocf:linbit:drbd \
        params drbd_resource="wwwdata" \
        op monitor interval="60s"
primitive WebFS ocf:heartbeat:Filesystem \
        params device="/dev/drbd/by-res/wwwdata" directory="/var/www/html" fstype=”gfs2”
primitive WebSite ocf:heartbeat:apache \
        params configfile="/etc/httpd/conf/httpd.conf" \
        op monitor interval="1min"
primitive ClusterIP ocf:heartbeat:IPaddr2 \
        params ip=”192.168.122.101” cidr_netmask=”32” clusterip_hash=”sourceip” \
        op monitor interval="30s"
primitive dlm ocf:pacemaker:controld \
        op monitor interval="120s"
primitive gfs-control ocf:pacemaker:controld \
   params daemon=”gfs_controld.pcmk” args=”-g 0” \
        op monitor interval="120s"
ms WebDataClone WebData \
        meta master-max="2" master-node-max="1" clone-max="2" clone-node-max="1" notify="true"
<emphasis>clone WebFSClone WebFS</emphasis>
clone WebIP ClusterIP  \
        meta globally-unique=”true” clone-max=”2” clone-node-max=”2”
<emphasis>clone WebSiteClone WebSite</emphasis>
clone dlm-clone dlm \
        meta interleave="true"
clone gfs-clone gfs-control \
        meta interleave="true"
<emphasis>colocation WebFS-with-gfs-control inf: WebFSClone gfs-clone</emphasis>
<emphasis>colocation WebSite-with-WebFS inf: WebSiteClone WebFSClone</emphasis>
<emphasis>colocation fs_on_drbd inf: WebFSClone WebDataClone:Master</emphasis>
colocation gfs-with-dlm inf: gfs-clone dlm-clone
<emphasis>colocation website-with-ip inf: WebSiteClone WebIP</emphasis>
<emphasis>order WebFS-after-WebData inf: WebDataClone:promote WebFSClone:start</emphasis>
<emphasis>order WebSite-after-WebFS inf: WebFSClone WebSiteClone</emphasis>
<emphasis>order apache-after-ip inf: WebIP WebSiteClone</emphasis>
order start-WebFS-after-gfs-control inf: gfs-clone WebFSClone
order start-gfs-after-dlm inf: dlm-clone gfs-clone
property $id="cib-bootstrap-options" \
        dc-version="1.1.5-bdd89e69ba545404d02445be1f3d72e6a203ba2f" \
        cluster-infrastructure="openais" \
        expected-quorum-votes=”2” \
        stonith-enabled="false" \
        no-quorum-policy="ignore"
rsc_defaults $id="rsc-options" \
        resource-stickiness=”100”
    </screen>
    <para>
      Review the configuration before uploading it to the cluster, quitting the shell and watching the cluster’s response
    </para>
    <screen>
crm(active)# <userinput>cib commit active</userinput>
INFO: commited 'active' shadow CIB to the cluster
crm(active)# <userinput>quit</userinput>
bye
[root@pcmk-1 ~]# <userinput>crm_mon</userinput>
============
Last updated: Thu Sep  3 21:37:27 2009
Stack: openais
Current DC: pcmk-2 - partition with quorum
Version: 1.1.5-bdd89e69ba545404d02445be1f3d72e6a203ba2f
2 Nodes configured, 2 expected votes
6 Resources configured.
============

Online: [ pcmk-1 pcmk-2 ]

Master/Slave Set: WebDataClone
        Masters: [ pcmk-1 pcmk-2 ]
Clone Set: dlm-clone
        Started: [ pcmk-2 pcmk-1 ]
Clone Set: gfs-clone
        Started: [ pcmk-2 pcmk-1 ]
<emphasis>Clone Set: WebIP</emphasis>
<emphasis> Started: [ pcmk-1 pcmk-2 ]</emphasis>
<emphasis>Clone Set: WebFSClone</emphasis>
<emphasis> Started: [ pcmk-1 pcmk-2 ]</emphasis>
<emphasis>Clone Set: WebSiteClone</emphasis>
<emphasis> Started: [ pcmk-1 pcmk-2 ]</emphasis>
    </screen>
    <section>
      <title>Testing Recovery</title>
      <note>
	<para>
	  TODO: Put one node into standby to demonstrate failover
	</para>
      </note>
    </section>
  </section>
    
</chapter>

