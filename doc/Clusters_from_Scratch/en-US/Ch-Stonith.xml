<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter >

    <title>Configure STONITH</title>

<section id="_what_is_stonith">
<title>What Is STONITH</title>
<para>STONITH is an acronym for Shoot-The-Other-Node-In-The-Head and it
protects your data from being corrupted by rogue nodes or concurrent
access.</para>
<para>Just because a node is unresponsive, this doesn&#8217;t mean it isn&#8217;t
accessing your data. The only way to be 100% sure that your data is
safe, is to use STONITH so we can be certain that the node is truly
offline, before allowing the data to be accessed from another node.</para>
<para>STONITH also has a role to play in the event that a clustered service
cannot be stopped. In this case, the cluster uses STONITH to force the
whole node offline, thereby making it safe to start the service
elsewhere.</para>
</section>
<section id="_what_stonith_device_should_you_use">
<title>What STONITH Device Should You Use</title>
<para>It is crucial that the STONITH device can allow the cluster to
differentiate between a node failure and a network one.</para>
<para>The biggest mistake people make in choosing a STONITH device is to
use remote power switch (such as many on-board IMPI controllers) that
shares power with the node it controls. In such cases, the cluster
cannot be sure if the node is really offline, or active and suffering
from a network fault.</para>
<para>Likewise, any device that relies on the machine being active (such as
SSH-based "devices" used during testing) are inappropriate.</para>
</section>
<section id="_configuring_stonith">
<title>Configuring STONITH</title>
<orderedlist numeration="arabic">
<listitem>
<para>
Find the correct driver: <literal>stonith_admin --list-installed</literal>
</para>
</listitem>
<listitem>
<para>
Since every device is different, the parameters needed to configure
  it will vary. To find out the parameters associated with the device,
  run: <literal>stonith_admin --metadata --agent type</literal>
</para>
<literallayout class="monospaced">The output should be XML formatted text containing additional
parameter descriptions. We will endevor to make the output more
friendly in a later version.</literallayout>
</listitem>
<listitem>
<para>
Enter the shell crm Create an editable copy of the existing
  configuration cib new stonith Create a fencing resource containing a
  primitive resource with a class of stonith, a type of type and a
  parameter for each of the values returned in step 2: <literal>configure
  primitive &#8230;</literal>
</para>
</listitem>
<listitem>
<para>
If the device does not know how to fence nodes based on their uname,
  you may also need to set the special <literal>pcmk_host_map</literal> parameter.  See
  <literal>man stonithd</literal> for details.
</para>
</listitem>
<listitem>
<para>
If the device does not support the list command, you may also need
  to set the special <literal>pcmk_host_list</literal> and/or <literal>pcmk_host_check</literal>
  parameters.  See <literal>man stonithd</literal> for details.
</para>
</listitem>
<listitem>
<para>
If the device does not expect the victim to be specified with the
  port parameter, you may also need to set the special
  <literal>pcmk_host_argument</literal> parameter. See <literal>man stonithd</literal> for details.
</para>
</listitem>
<listitem>
<para>
Upload it into the CIB from the shell: <literal>cib commit stonith</literal>
</para>
</listitem>
<listitem>
<para>
Once the stonith resource is running, you can test it by executing:
  <literal>stonith_admin --reboot nodename</literal>. Although you might want to stop the
  cluster on that machine first.
</para>
</listitem>
</orderedlist>
</section>
<section id="_example">
<title>Example</title>
<para>Assuming we have an chassis containing four nodes and an IPMI device
active on 10.0.0.1, then we would chose the fence_ipmilan driver in step
2 and obtain the following list of parameters</para>
<programlisting language="Bash" linenumbering="unnumbered"># stonith_admin --metadata -a fence_ipmilan</programlisting>
<programlisting language="XML" linenumbering="unnumbered">&lt;?xml version="1.0" ?&gt;
&lt;resource-agent name="fence_ipmilan" shortdesc="Fence agent for IPMI over LAN"&gt;
&lt;longdesc&gt;
fence_ipmilan is an I/O Fencing agent which can be used with machines controlled by IPMI. This agent calls support software using ipmitool (http://ipmitool.sf.net/).

To use fence_ipmilan with HP iLO 3 you have to enable lanplus option (lanplus / -P) and increase wait after operation to 4 seconds (power_wait=4 / -T 4)&lt;/longdesc&gt;
&lt;parameters&gt;
        &lt;parameter name="auth" unique="1"&gt;
                &lt;getopt mixed="-A" /&gt;
                &lt;content type="string" /&gt;
                &lt;shortdesc &gt;IPMI Lan Auth type (md5, password, or none)&lt;/shortdesc&gt;
        &lt;/parameter&gt;
        &lt;parameter name="ipaddr" unique="1"&gt;
                &lt;getopt mixed="-a" /&gt;
                &lt;content type="string" /&gt;
                &lt;shortdesc &gt;IPMI Lan IP to talk to&lt;/shortdesc&gt;
        &lt;/parameter&gt;
        &lt;parameter name="passwd" unique="1"&gt;
                &lt;getopt mixed="-p" /&gt;
                &lt;content type="string" /&gt;
                &lt;shortdesc &gt;Password (if required) to control power on IPMI device&lt;/shortdesc&gt;
        &lt;/parameter&gt;
        &lt;parameter name="passwd_script" unique="1"&gt;
                &lt;getopt mixed="-S" /&gt;
                &lt;content type="string" /&gt;
                &lt;shortdesc &gt;Script to retrieve password (if required)&lt;/shortdesc&gt;
        &lt;/parameter&gt;
        &lt;parameter name="lanplus" unique="1"&gt;
                &lt;getopt mixed="-P" /&gt;
                &lt;content type="boolean" /&gt;
                &lt;shortdesc &gt;Use Lanplus&lt;/shortdesc&gt;
        &lt;/parameter&gt;
        &lt;parameter name="login" unique="1"&gt;
                &lt;getopt mixed="-l" /&gt;
                &lt;content type="string" /&gt;
                &lt;shortdesc &gt;Username/Login (if required) to control power on IPMI device&lt;/shortdesc&gt;
        &lt;/parameter&gt;
        &lt;parameter name="action" unique="1"&gt;
                &lt;getopt mixed="-o" /&gt;
                &lt;content type="string" default="reboot"/&gt;
                &lt;shortdesc &gt;Operation to perform. Valid operations: on, off, reboot, status, list, diag, monitor or metadata&lt;/shortdesc&gt;
        &lt;/parameter&gt;
        &lt;parameter name="timeout" unique="1"&gt;
                &lt;getopt mixed="-t" /&gt;
                &lt;content type="string" /&gt;
                &lt;shortdesc &gt;Timeout (sec) for IPMI operation&lt;/shortdesc&gt;
        &lt;/parameter&gt;
        &lt;parameter name="cipher" unique="1"&gt;
                &lt;getopt mixed="-C" /&gt;
                &lt;content type="string" /&gt;
                &lt;shortdesc &gt;Ciphersuite to use (same as ipmitool -C parameter)&lt;/shortdesc&gt;
        &lt;/parameter&gt;
        &lt;parameter name="method" unique="1"&gt;
                &lt;getopt mixed="-M" /&gt;
                &lt;content type="string" default="onoff"/&gt;
                &lt;shortdesc &gt;Method to fence (onoff or cycle)&lt;/shortdesc&gt;
        &lt;/parameter&gt;
        &lt;parameter name="power_wait" unique="1"&gt;
                &lt;getopt mixed="-T" /&gt;
                &lt;content type="string" default="2"/&gt;
                &lt;shortdesc &gt;Wait X seconds after on/off operation&lt;/shortdesc&gt;
        &lt;/parameter&gt;
        &lt;parameter name="delay" unique="1"&gt;
                &lt;getopt mixed="-f" /&gt;
                &lt;content type="string" /&gt;
                &lt;shortdesc &gt;Wait X seconds before fencing is started&lt;/shortdesc&gt;
        &lt;/parameter&gt;
        &lt;parameter name="verbose" unique="1"&gt;
                &lt;getopt mixed="-v" /&gt;
                &lt;content type="boolean" /&gt;
                &lt;shortdesc &gt;Verbose mode&lt;/shortdesc&gt;
        &lt;/parameter&gt;
&lt;/parameters&gt;
&lt;actions&gt;
        &lt;action name="on" /&gt;
        &lt;action name="off" /&gt;
        &lt;action name="reboot" /&gt;
        &lt;action name="status" /&gt;
        &lt;action name="diag" /&gt;
        &lt;action name="list" /&gt;
        &lt;action name="monitor" /&gt;
        &lt;action name="metadata" /&gt;
&lt;/actions&gt;
&lt;/resource-agent&gt;</programlisting>
<para>from which we would create a STONITH resource fragment that might look
like this</para>
<programlisting language="Bash" linenumbering="unnumbered"># crm crm(live)# cib new stonith
INFO: stonith shadow CIB created
crm(stonith)# configure primitive impi-fencing stonith::fence_ipmilan \
 params pcmk_host_list="pcmk-1 pcmk-2" ipaddr=10.0.0.1 login=testuser passwd=abc123 \
 op monitor interval="60s"</programlisting>
<para>And finally, since we disabled it earlier, we need to re-enable STONITH.
At this point we should have the following configuration..</para>
<programlisting language="Bash" linenumbering="unnumbered">crm(stonith)# configure property stonith-enabled="true"crm(stonith)# configure shownode pcmk-1
node pcmk-2
primitive WebData ocf:linbit:drbd \
    params drbd_resource="wwwdata" \
    op monitor interval="60s"
primitive WebFS ocf:heartbeat:Filesystem \
    params device="/dev/drbd/by-res/wwwdata" directory="/var/www/html" fstype="gfs2"
primitive WebSite ocf:heartbeat:apache \
    params configfile="/etc/httpd/conf/httpd.conf" \
    op monitor interval="1min"
primitive ClusterIP ocf:heartbeat:IPaddr2 \
    params ip="192.168.122.101" cidr_netmask="32" clusterip_hash="sourceip" \
    op monitor interval="30s"primitive ipmi-fencing stonith::fence_ipmilan \ params pcmk_host_list="pcmk-1 pcmk-2" ipaddr=10.0.0.1 login=testuser passwd=abc123 \ op monitor interval="60s"ms WebDataClone WebData \
    meta master-max="2" master-node-max="1" clone-max="2" clone-node-max="1" notify="true"
clone WebFSClone WebFS
clone WebIP ClusterIP \
    meta globally-unique="true" clone-max="2" clone-node-max="2"
clone WebSiteClone WebSite
colocation WebSite-with-WebFS inf: WebSiteClone WebFSClone
colocation fs_on_drbd inf: WebFSClone WebDataClone:Master
colocation website-with-ip inf: WebSiteClone WebIP
order WebFS-after-WebData inf: WebDataClone:promote WebFSClone:start
order WebSite-after-WebFS inf: WebFSClone WebSiteClone
order apache-after-ip inf: WebIP WebSiteClone
property $id="cib-bootstrap-options" \
    dc-version="1.1.5-bdd89e69ba545404d02445be1f3d72e6a203ba2f" \
    cluster-infrastructure="openais" \
    expected-quorum-votes="2" \
    stonith-enabled="true" \
    no-quorum-policy="ignore"
rsc_defaults $id="rsc-options" \
    resource-stickiness="100"
crm(stonith)# cib commit stonithINFO: commited 'stonith' shadow CIB to the cluster
crm(stonith)# quit
bye</programlisting>
</section>
</chapter>
