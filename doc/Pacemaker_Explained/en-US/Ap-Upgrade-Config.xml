<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>





<appendix id="_upgrading_the_configuration_from_0_6">
<title>Upgrading the Configuration from 0.6</title>
<section id="_preparation">
<title>Preparation</title>
<para><indexterm>
  <primary>Upgrading the Configuration</primary>
</indexterm>
<indexterm>
  <primary>Configuration</primary><secondary>Upgrading</secondary>
</indexterm>
<indexterm>
  <primary>Upgrading</primary>
</indexterm></para>
<para><indexterm>
  <primary>Download</primary><secondary>DTD</secondary>
</indexterm>
<indexterm>
  <primary>DTD</primary>
</indexterm>
<indexterm>
  <primary>DTD</primary><secondary>Download</secondary>
</indexterm>
<indexterm>
  <primary>Download</primary>
</indexterm></para>
<para>Download the latest
<ulink url="http://hg.clusterlabs.org/pacemaker/stable-1.0/file-raw/tip/xml/crm.dtd">DTD</ulink>
and ensure your configuration validates.</para>
</section>
<section id="_perform_the_upgrade">
<title>Perform the upgrade</title>
<section id="_upgrade_the_software">
<title>Upgrade the software</title>
<para>Refer to the appendix: <xref linkend="ap-upgrade"/></para>
</section>
<section id="_upgrade_the_configuration">
<title>Upgrade the Configuration</title>
<para>As XML is not the friendliest of languages, it is common for cluster
administrators to have scripted some of their activities. In such
cases, it is likely that those scripts will not work with the new 1.0
syntax.</para>
<para>In order to support such environments, it is actually possible to
continue using the old 0.6 syntax.</para>
<para>The downside is, however, that not all the new features will be
available and there is a performance impact since the cluster must do
a non-persistent configuration upgrade before each transition. So
while using the old syntax is possible, it is not advisable to
continue using it indefinitely.</para>
<para>Even if you wish to continue using the old syntax, it is advisable to
follow the upgrade procedure to ensure that the cluster is able to use
your existing configuration (since it will perform much the same task
internally).</para>
<orderedlist numeration="arabic">
<listitem>
<para>
Create a shadow copy to work with
</para>
<programlisting language="C" linenumbering="unnumbered"># crm_shadow --create upgrade06</programlisting>
</listitem>
<listitem>
<para>
Verify the configuration is valid <indexterm>
  <primary>Configuration</primary><secondary>Verify</secondary>
</indexterm>
<indexterm>
  <primary>Verify</primary>
</indexterm><indexterm>
  <primary>Verify</primary><secondary>Configuration</secondary>
</indexterm>
<indexterm>
  <primary>Configuration</primary>
</indexterm>
</para>
<programlisting language="C" linenumbering="unnumbered"># crm_verify --live-check</programlisting>
</listitem>
<listitem>
<para>
Fix any errors or warnings
</para>
</listitem>
<listitem>
<para>
Perform the upgrade:
</para>
<programlisting language="C" linenumbering="unnumbered"># cibadmin --upgrade</programlisting>
</listitem>
<listitem>
<para>
If this step fails, there are three main possibilities:
</para>
<orderedlist numeration="loweralpha">
<listitem>
<para>
The configuration was not valid to start with - go back to step 2
</para>
</listitem>
<listitem>
<para>
The transformation failed - report a bug or <ulink url="mailto:pacemaker@oss.clusterlabs.org?subject=Transformation%20failed%20during%20upgrade">email the project</ulink>
</para>
</listitem>
<listitem>
<para>
The transformation was successful but produced an invalid result <footnote><para>
The most common reason is ID values being repeated or invalid. Pacemaker 1.0 is much stricter regarding this type of validation.
</para></footnote>
</para>
<para>If the result of the transformation is invalid, you may see a number of errors from the validation library. If these are not helpful, visit <ulink url="http://clusterlabs.org/wiki/Validation_FAQ">http://clusterlabs.org/wiki/Validation_FAQ</ulink> and/or try the procedure described below under <xref linkend="s-upgrade-config-manual"/></para>
</listitem>
</orderedlist>
</listitem>
<listitem>
<para>
Check the changes
</para>
<programlisting language="C" linenumbering="unnumbered"># crm_shadow --diff</programlisting>
<para>If at this point there is anything about the upgrade that you wish to fine-tune (for example, to change some of the automatic IDs) now is the time to do so. Since the shadow configuration is not in use by the cluster, it is safe to edit the file manually:</para>
<programlisting language="C" linenumbering="unnumbered"># crm_shadow --edit</programlisting>
<para>This will open the configuration in your favorite editor (whichever is specified by the standard <literal>$EDITOR</literal> environment variable)</para>
</listitem>
<listitem>
<para>
Preview how the cluster will react
</para>
<para>Test what the cluster will do when you upload the new configuration</para>
<programlisting language="C" linenumbering="unnumbered"># crm_simulate --live-check --save-dotfile upgrade06.dot -S
# graphviz upgrade06.dot</programlisting>
<para>Verify that either no resource actions will occur or that you are
happy with any that are scheduled.  If the output contains actions you
do not expect (possibly due to changes to the score calculations), you
may need to make further manual changes.  See
<xref linkend="s-config-testing-changes"/> for further details on how to interpret
the output of <literal>crm_simulate</literal></para>
</listitem>
<listitem>
<para>
Upload the changes
</para>
<programlisting language="C" linenumbering="unnumbered"># crm_shadow --commit upgrade06 --force</programlisting>
</listitem>
</orderedlist>
<para>If this step fails, something really strange has occurred. You should report a bug.</para>
</section>
<section id="s-upgrade-config-manual">
<title>Manually Upgrading the Configuration</title>
<para><indexterm>
  <primary>Configuration</primary><secondary>Upgrade manually</secondary>
</indexterm>
<indexterm>
  <primary>Upgrade manually</primary>
</indexterm>
It is also possible to perform the configuration upgrade steps manually. To do this</para>
<para>Locate the <emphasis>upgrade06.xsl</emphasis> conversion script or download the latest
version from
<ulink url="https://github.com/ClusterLabs/pacemaker/tree/master/xml/upgrade06.xsl">Git</ulink></para>
<orderedlist numeration="arabic">
<listitem>
<para>
Convert the XML blob: <indexterm>
  <primary>XML</primary><secondary>Convert</secondary>
</indexterm>
<indexterm>
  <primary>Convert</primary>
</indexterm>
</para>
<programlisting language="C" linenumbering="unnumbered"># xsltproc /path/to/upgrade06.xsl config06.xml &gt; config10.xml</programlisting>
</listitem>
<listitem>
<para>
Locate the <emphasis>pacemaker.rng</emphasis> script.
</para>
</listitem>
<listitem>
<para>
Check the XML validity: <indexterm>
  <primary>Validate Configuration</primary>
</indexterm><indexterm>
  <primary>Configuration</primary><secondary>Validate XML</secondary>
</indexterm>
<indexterm>
  <primary>Validate XML</primary>
</indexterm>
</para>
<programlisting language="C" linenumbering="unnumbered"># xmllint --relaxng /path/to/pacemaker.rng config10.xml</programlisting>
</listitem>
</orderedlist>
<para>The advantage of this method is that it can be performed without the
cluster running and any validation errors should be more informative
(despite being generated by the same library!) since they include line
numbers.</para>
</section>
</section>
</appendix>

