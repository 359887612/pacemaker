#!/bin/sh

XSL_FILE="@XSL_FILE@"
SAXON_JAR="@SAXON_JAR@"
DEBUG=0

export XSL_FILE SAXON_JAR DEBUG

#
#
#
die()
{
	echo "$*"
	exit 1
}

_validate()
{
	if [ $DEBUG -eq 1 ]; then
		echo "debug: adding . to $PATH"
		export PATH="$PATH:."
	fi

	which ccs_flatten &> /dev/null	|| die "Can't find ccs_flatten in path!"
	which java &> /dev/null		|| die "Can not find java in path!"

	if [ -z "$XSL_FILE" ] || [ "$XSL_FILE" = "@XSL_FILE@" ]; then
		if [ $DEBUG -eq 1 ]; then
			XSL_FILE=./cluconf2cib.xsl
			echo "debug: using $XSL_FILE"
		else
			die "Please specify path to XSLT script using -X <path>."
		fi
	fi

	if [ -z "$SAXON_JAR" ] || [ "$SAXON_JAR" = "@SAXON_JAR@" ]; then
		if [ $DEBUG -eq 1 ]; then
			SAXON_JAR=/usr/share/java/saxon.jar
			echo "debug: using $SAXON_JAR"
		else
			die "Please specify path to saxon.jar using -J <path>."
		fi
	fi

	[ -d /usr/share/cluster ] || die "/usr/share/cluster does not exist."
	[ -f /usr/share/cluster/service.sh ] || die "Missing rgmanager resource agents?"

	[ -f "$XSL_FILE" ] || die "$XSL_FILE does not exist!"
	[ -f "$SAXON_JAR" ] || die "$SAXON_JAR does not exist!"

	[ -f "$1" ] || die "Input file $1 not found"

	if [ -f "$2" ]; then
		[ $3 -ne 0 ] || die "Output file $2 exists; please remove or use -f"
	fi

	return 0
}


help()
{
cat <<EOT
usage: $(basename $1) [options]
	-i input_file	Configuration input [/etc/cluster/cluster.conf]
	-o output_file	File to output [cib.xml]
	-f		Force update (remove output_file if it exists)
	-r		Disable rgmanager in input file after completion
	-n		Don't call crm_verify on the new cib.xml
	-d		Enable development/debug mode
	-X <path>	Specify path to XSLT script
	-J <path>	Specify path to Saxon jar file
	-h		This message
EOT
}


# main
declare conf_in cib_out xsl_file saxon_jar conf_out opt do_update tmp
declare force_update no_verify

# defaults
conf_in="/etc/cluster/cluster.conf"
cib_out="cib-converted.xml"
do_update=0
no_verify=0
tmp=$(mktemp /tmp/ccs2cib.tmp.XXXXXX)

while getopts i:o:X:J:rdnhf opt; do
	case $opt in
	d)
		DEBUG=1
		;;
	i)
		conf_in="$OPTARG"
		;;
	o)
		cib_out="$OPTARG"
		;;
	r)
		do_update=1
		;;
	n)
		no_verify=1
		;;
	f)
		force_update=1
		;;
	X)
		XSL_FILE="$OPTARG"
		;;
	J)
		SAXON_JAR="$OPTARG"
		;;
	h)
		help $0
		exit 0
		;;
	*)
		echo "Error parsing $opt"
		help $0
		exit 1
		;;
	esac
done

_validate "$conf_in" "$cib_out" $force_update

if ! ccs_flatten "$conf_in" > $tmp; then
	rm -f $tmp
	die ccs_flatten failed.
fi

if ! java -jar $SAXON_JAR -xsl:$XSL_FILE $tmp > $cib_out; then
	rm -f $tmp
	die Conversion failed.
fi

if [ $no_verify -eq 0 ]; then
	crm_verify --xml-file $cib_out -V
	ret=$?
	if [ $ret -ne 0 ]; then
		echo FAILED.
		exit $ret
	fi
fi

if [ $do_update -ne 0 ]; then
	rm -f $tmp
	cp "$conf_in" "$tmp"
	disable_rgmanager "$tmp" "$tmp"
	mv "$tmp" "$conf_in"
fi

echo Complete, output is $cib_out

exit 0
